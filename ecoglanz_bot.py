from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler,
    MessageHandler, filters, ConversationHandler, ContextTypes, CallbackQueryHandler
)
import json
import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –°–¢–ê–ù–ò
CITY, PLACE_TYPE, CLEAN_TYPE, ADDRESS, DATE, TIME, CONFIRM, NAME, PHONE = range(9)

ADMIN_ID = 929619425  # —Ç–≤—ñ–π Telegram ID

# Google Sheets —Ñ—É–Ω–∫—Ü—ñ—è
def append_to_google_sheet(order):
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name("eco-glanz-bot-key.json", scope)
        client = gspread.authorize(creds)

        sheet = client.open("EcoGlanzOrders")
        city_sheet_name = order.get("city")

        try:
            worksheet = sheet.worksheet(city_sheet_name)
        except gspread.exceptions.WorksheetNotFound:
            worksheet = sheet.add_worksheet(title=city_sheet_name, rows="100", cols="20")

        row = [
            order.get("user"),
            order.get("city"),
            order.get("clean_type"),
            order.get("place_type"),
            order.get("address"),
            f"{order.get('date')} {order.get('time')}",
            order.get("phone", ""),
            order.get("timestamp"),
            order.get("status", "–û—á—ñ–∫—É—î—Ç—å—Å—è")
        ]
        worksheet.append_row(row)
        print("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ —É Google –¢–∞–±–ª–∏—Ü—é")
    except Exception as e:
        print(f"‚ùå –ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤ —Ç–∞–±–ª–∏—Ü—é: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [["–ö–∏—ó–≤", "–û–¥–µ—Å–∞", "–õ—å–≤—ñ–≤"]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:", reply_markup=markup)
    return CITY

async def select_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city"] = update.message.text
    keyboard = [["–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–ë—É–¥–∏–Ω–æ–∫"], ["–û—Ñ—ñ—Å", "–Ü–Ω—à–µ"]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–Ø–∫–µ –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏–±—Ä–∞—Ç–∏?", reply_markup=markup)
    return PLACE_TYPE

async def place_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["place_type"] = update.message.text
    keyboard = [["–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–†–µ–≥—É–ª—è—Ä–Ω–µ"], ["–ì–µ–Ω–µ—Ä–∞–ª—å–Ω–µ", "–Ü–Ω—à–µ"]]
    markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–Ø–∫–∏–π —Ç–∏–ø –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?", reply_markup=markup)
    return CLEAN_TYPE

async def clean_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["clean_type"] = update.message.text
    await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –∞–¥—Ä–µ—Å—É (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É/–∫–≤–∞—Ä—Ç–∏—Ä–∏):")
    return ADDRESS

async def address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text

    now = datetime.datetime.today()
    today_label = now.strftime('%A, %d.%m.%Y')
    weekdays_ua = {
        'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
        'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
        'Wednesday': '–°–µ—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä',
        'Friday': '–ü º—è—Ç–Ω–∏—Ü—è',
        'Saturday': '–°—É–±–æ—Ç–∞',
        'Sunday': '–ù–µ–¥—ñ–ª—è'
    }
    for en, ua in weekdays_ua.items():
        today_label = today_label.replace(en, ua)

    await update.message.reply_text(
        f"üìÖ –°—å–æ–≥–æ–¥–Ω—ñ: {today_label}\n–ù–∞ —è–∫–∏–π –¥–µ–Ω—å –ø–ª–∞–Ω—É—î—Ç—å—Å—è –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –∞–±–æ  25.05.2025)"
    )
    return DATE

async def date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["date"] = update.message.text

    now = datetime.datetime.today()
    today_label = now.strftime('%A, %d.%m.%Y')
    weekdays_ua = {
        'Monday': '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
        'Tuesday': '–í—ñ–≤—Ç–æ—Ä–æ–∫',
        'Wednesday': '–°–µ—Ä–µ–¥–∞',
        'Thursday': '–ß–µ—Ç–≤–µ—Ä',
        'Friday': '–ü º—è—Ç–Ω–∏—Ü—è',
        'Saturday': '–°—É–±–æ—Ç–∞',
        'Sunday': '–ù–µ–¥—ñ–ª—è'
    }
    for en, ua in weekdays_ua.items():
        today_label = today_label.replace(en, ua)
    await update.message.reply_text(f"üìÖ –°—å–æ–≥–æ–¥–Ω—ñ: {today_label}")
    await update.message.reply_text("–û –∫–æ—Ç—Ä—ñ–π –≥–æ–¥–∏–Ω—ñ –≤–∞–º –∑—Ä—É—á–Ω–æ? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 10:00)")
    return TIME

async def time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["time"] = update.message.text

    summary = (
        f"üßπ –¢–∏–ø –ø—Ä–∏–±–∏—Ä–∞–Ω–Ω—è: {context.user_data['clean_type']}\n"
        f"üè† –ü—Ä–∏–º—ñ—â–µ–Ω–Ω—è: {context.user_data['place_type']}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {context.user_data['address']}\n"
        f"üìÜ –î–∞—Ç–∞: {context.user_data['date']}\n"
        f"üïí –ß–∞—Å: {context.user_data['time']}\n"
        f"üåÜ –ú—ñ—Å—Ç–æ: {context.user_data['city']}\n\n"
        f"‚ùì –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ—Ä–Ω–æ?"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –¢–∞–∫, –≤—Å–µ –≤—ñ—Ä–Ω–æ", callback_data="confirm")],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="edit")]
    ])

    await update.message.reply_text(summary, reply_markup=keyboard)
    return CONFIRM

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user

    if query.data == "edit":
        await query.edit_message_text("–û–∫–µ–π, –¥–∞–≤–∞–π—Ç–µ –ø–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å /start")
        return ConversationHandler.END

    await context.bot.send_message(chat_id=user.id, text="–Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["client_name"] = update.message.text

    button = KeyboardButton("üìû –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä", request_contact=True)
    markup = ReplyKeyboardMarkup([[button]], one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä –Ω–∞–¥—ñ—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=markup
    )
    return PHONE

async def save_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.contact.phone_number
    user = update.message.from_user

    context.user_data["phone"] = phone

    await update.message.reply_text(
        "‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à –Ω–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup([[" "]], resize_keyboard=True)
    )
    await update.message.reply_text("üìû –û—á—ñ–∫—É–π—Ç–µ, –ø–æ–∫–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫ –∑ –≤–∞–º–∏ –∑–≤ º—è–∂–µ—Ç—å—Å—è!")

    order = {
        "user": context.user_data.get("client_name", user.username or user.first_name),
        "city": context.user_data["city"],
        "clean_type": context.user_data["clean_type"],
        "place_type": context.user_data["place_type"],
        "address": context.user_data["address"],
        "date": context.user_data["date"],
        "time": context.user_data["time"],
        "phone": phone,
        "timestamp": datetime.datetime.now().isoformat(),
        "status": "–û—á—ñ–∫—É—î—Ç—å—Å—è"
    }

    append_to_google_sheet(order)

    admin_text = (
        "üì• –ù–û–í–ê –ó–ê–Ø–í–ö–ê\n\n"
        f"üë§ –ö–ª—ñ—î–Ω—Ç: {order['user']}\n"
        f"üåÜ –ú—ñ—Å—Ç–æ: {order['city']}\n"
        f"üßπ –¢–∏–ø: {order['clean_type']}\n"
        f"üè† –ü—Ä–∏–º—ñ—â–µ–Ω–Ω—è: {order['place_type']}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {order['address']}\n"
        f"üìÜ –î–∞—Ç–∞: {order['date']}\n"
        f"üïí –ß–∞—Å: {order['time']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order['phone']}\n"
        f"üìÖ –ó–∞—è–≤–∫–∞ –Ω–∞–¥—ñ–π—à–ª–∞: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}\n"
        f"üìå –°—Ç–∞—Ç—É—Å: –û—á—ñ–∫—É—î—Ç—å—Å—è"
    )

    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –º—ñ—Å—Ç–∞
    try:
        with open("cities.json", "r") as f:
            workers = json.load(f)
        city_workers = workers.get(order["city"], [])
        for worker_id in city_workers:
            await context.bot.send_message(chat_id=worker_id, text=admin_text)
    except Exception as e:
        print(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º: {e}")

    await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token("8054453181:AAGObFExKj0WRr8bGy9LV7h0kzPxvBAWawk").build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_city)],
            PLACE_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, place_type)],
            CLEAN_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, clean_type)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, address)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, date)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, time)],
            CONFIRM: [CallbackQueryHandler(confirm_order)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.CONTACT, save_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv)
    print("üöÄ EcoGlanz –±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == "__main__":
    main()
